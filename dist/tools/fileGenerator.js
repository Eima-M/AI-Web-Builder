"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReportFile = void 0;
const tools_1 = require("@mastra/core/tools");
const zod_1 = require("zod");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
exports.generateReportFile = new tools_1.Tool({
    id: 'generateReportFile',
    description: 'Generate a downloadable text file with website requirements report',
    inputSchema: zod_1.z.object({
        reportContent: zod_1.z.string().describe('The complete website requirements report content'),
        filename: zod_1.z.string().optional().describe('Name for the text file (optional)'),
        outputDirectory: zod_1.z.string().optional().describe('Directory to save the file (optional)')
    }),
    outputSchema: zod_1.z.object({
        success: zod_1.z.boolean(),
        filePath: zod_1.z.string().optional(),
        fileName: zod_1.z.string().optional(),
        error: zod_1.z.string().optional()
    }),
    execute: async (params) => {
        try {
            // Extract input from params
            const input = params.context || params.data || params.input || params;
            const { reportContent, filename, outputDirectory } = input;
            // Validate that we have the required fields
            if (!reportContent) {
                throw new Error('reportContent is required but was not provided');
            }
            // Create filename and directory
            const defaultFilename = `website-requirements-${new Date().toISOString().split('T')[0]}.txt`;
            const fileName = filename || defaultFilename;
            const outputDir = outputDirectory || path.join(process.cwd(), 'generated-reports');
            // Ensure output directory exists
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }
            const filePath = path.join(outputDir, fileName);
            // Create the text file content with proper formatting
            const textFileContent = `WEBSITE REQUIREMENTS REPORT
Generated: ${new Date().toLocaleString()}
========================================

${reportContent}

========================================
Generated by AI Website Builder
Report ID: ${Date.now()}
Contact: Your development team for any questions
`;
            // Write the file
            fs.writeFileSync(filePath, textFileContent, 'utf-8');
            console.log(`Report file generated successfully: ${filePath}`);
            return {
                success: true,
                filePath: filePath,
                fileName: fileName
            };
        }
        catch (error) {
            console.error('Error generating report file:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error occurred'
            };
        }
    }
});
