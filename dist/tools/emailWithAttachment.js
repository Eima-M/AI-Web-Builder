"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emailWithAttachment = void 0;
const tools_1 = require("@mastra/core/tools");
const zod_1 = require("zod");
const resend_1 = require("resend");
const resend = new resend_1.Resend(process.env.RESEND_API_KEY);
exports.emailWithAttachment = new tools_1.Tool({
    id: 'emailWithAttachment',
    description: 'Send website requirements report via email with downloadable text file attachment',
    inputSchema: zod_1.z.object({
        recipientEmail: zod_1.z.string().email().describe('Email address to send the report to'),
        reportContent: zod_1.z.string().describe('The complete website requirements report content'),
        subject: zod_1.z.string().optional().describe('Custom email subject (optional)'),
        recipientName: zod_1.z.string().optional().describe('Recipient name for personalization (optional)'),
        filename: zod_1.z.string().optional().describe('Name for the text file attachment (optional)')
    }),
    outputSchema: zod_1.z.object({
        success: zod_1.z.boolean(),
        messageId: zod_1.z.string().optional(),
        error: zod_1.z.string().optional()
    }),
    execute: async (params) => {
        try {
            // Debug: Log the entire params structure
            console.log('Raw params received:', JSON.stringify(params, null, 2));
            // Extract input from params - Mastra passes data in params.context
            const input = params.context || params.data || params.input || params;
            console.log('Extracted input:', JSON.stringify(input, null, 2));
            const { recipientEmail, reportContent, subject, recipientName, filename } = input;
            // Validate that we have the required fields
            if (!recipientEmail) {
                throw new Error('recipientEmail is required but was not provided');
            }
            if (!reportContent) {
                throw new Error('reportContent is required but was not provided');
            }
            console.log('Using recipientEmail:', recipientEmail);
            console.log('reportContent length:', reportContent?.length || 0);
            // Create a personalized email subject and filename
            const emailSubject = subject || 'Your Website Requirements Report';
            const attachmentFilename = filename || `website-requirements-${new Date().toISOString().split('T')[0]}.txt`;
            // Create HTML formatted email content
            const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
          <h1 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
            Website Requirements Report
          </h1>
          
          ${recipientName ? `<p>Hi ${recipientName},</p>` : '<p>Hello,</p>'}
          
          <p>Thank you for completing the website consultation! Please find your comprehensive website requirements report attached as a downloadable text file.</p>
          
          <div style="background-color: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007bff;">
            <h3 style="color: #007bff; margin-top: 0;">ðŸ“Ž Attachment Included</h3>
            <p style="margin-bottom: 0;"><strong>${attachmentFilename}</strong> - Your complete website requirements document</p>
          </div>
          
          <p>This document contains all the information gathered during our consultation to help guide the development of your React-based website.</p>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
          
          <p style="color: #666; font-size: 14px;">
            <strong>Next Steps:</strong><br>
            â€¢ Download and review the attached requirements document<br>
            â€¢ Share this report with your development team<br>
            â€¢ Contact us if you need any clarifications or modifications<br>
            â€¢ Keep this document handy for reference during development
          </p>
          
          <p style="color: #666; font-size: 14px;">
            Best regards,<br>
            Your AI Website Consultant
          </p>
        </div>
      `;
            // Create the text file content with proper formatting
            const textFileContent = `WEBSITE REQUIREMENTS REPORT
Generated: ${new Date().toLocaleDateString()}
========================================

${reportContent}

========================================
Generated by AI Website Builder
Contact: Your development team for any questions
`;
            // Convert text content to base64 for attachment
            const attachmentContent = Buffer.from(textFileContent, 'utf-8').toString('base64');
            // Send the email with attachment
            console.log('Attempting to send email with attachment to:', recipientEmail);
            const data = await resend.emails.send({
                from: 'Website Consultant <onboarding@resend.dev>', // Use Resend's verified domain
                to: [recipientEmail],
                subject: emailSubject,
                html: htmlContent,
                text: `Website Requirements Report\n\nPlease find your website requirements report attached to this email.\n\n${reportContent}`, // Fallback plain text
                attachments: [
                    {
                        filename: attachmentFilename,
                        content: attachmentContent,
                        contentType: 'text/plain'
                    }
                ]
            });
            console.log('Email with attachment sent successfully:', data);
            // Check if there was an error in the response
            if (data.error) {
                throw new Error(`Resend API Error: ${data.error.message}`);
            }
            return {
                success: true,
                messageId: data.data?.id || 'Email with attachment sent successfully'
            };
        }
        catch (error) {
            console.error('Error sending email with attachment:', error);
            console.error('Full error details:', JSON.stringify(error, null, 2));
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error occurred'
            };
        }
    }
});
