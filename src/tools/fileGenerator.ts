import { Tool } from '@mastra/core/tools';
import { z } from 'zod';
import * as fs from 'fs';
import * as path from 'path';

export const generateReportFile = new Tool({
  id: 'generateReportFile',
  description: 'Generate a downloadable text file with website requirements report',
  inputSchema: z.object({
    reportContent: z.string().describe('The complete website requirements report content'),
    filename: z.string().optional().describe('Name for the text file (optional)'),
    outputDirectory: z.string().optional().describe('Directory to save the file (optional)')
  }),
  outputSchema: z.object({
    success: z.boolean(),
    filePath: z.string().optional(),
    fileName: z.string().optional(),
    error: z.string().optional()
  }),
  execute: async (params: any) => {
    try {
      // Extract input from params
      const input = params.context || params.data || params.input || params;
      const { reportContent, filename, outputDirectory } = input;
      
      // Validate that we have the required fields
      if (!reportContent) {
        throw new Error('reportContent is required but was not provided');
      }
      
      // Create filename and directory
      const defaultFilename = `website-requirements-${new Date().toISOString().split('T')[0]}.txt`;
      const fileName = filename || defaultFilename;
      const outputDir = outputDirectory || path.join(process.cwd(), 'generated-reports');
      
      // Ensure output directory exists
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      const filePath = path.join(outputDir, fileName);
      
      // Create the text file content with proper formatting
      const textFileContent = `WEBSITE REQUIREMENTS REPORT
Generated: ${new Date().toLocaleString()}
========================================

${reportContent}

========================================
Generated by AI Website Builder
Report ID: ${Date.now()}
Contact: Your development team for any questions
`;

      // Write the file
      fs.writeFileSync(filePath, textFileContent, 'utf-8');
      
      console.log(`Report file generated successfully: ${filePath}`);
      
      return {
        success: true,
        filePath: filePath,
        fileName: fileName
      };

    } catch (error) {
      console.error('Error generating report file:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      };
    }
  }
});
